{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","datasets","label","backgroundColor","borderColor","fill","options","_this","getOptions","this","getData","title","text","fontSize","display","responsive","scales","xAxes","type","gridLines","color","time","parser","tooltipFormat","displayFormats","day","hour","scaleLabel","labelString","yAxes","ticks","beginAtZero","legend","_this2","axios","get","then","result","Object","entries","bpi","forEach","entry","x","moment","y","push","setState","catch","error","console","log","defaults","global","defaultFontColor","react_default","a","createElement","className","es","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOA6GeA,6MAtGbC,MAAQ,CACNC,KAAM,CACJC,SAAU,CAAC,CACTC,MAAO,gBACPC,gBAAiB,UACjBC,YAAa,UACbC,MAAM,EACNL,KAAM,MAGVM,QAASC,EAAKC,iGAIdC,KAAKC,+CAkDL,MA5CgB,CACdC,MAAO,CACLC,KAAM,UACNC,SAAU,GACVC,SAAS,GAEXC,YAAY,EACZC,OAAQ,CACNC,MAAO,CAAC,CACNC,KAAM,OACNC,UAAW,CACTC,MAAO,yBAETC,KAAM,CACJC,OAhBW,sBAkBXC,cAAe,cACfC,eAAgB,CACdC,IAAK,SACLC,KAAM,WAGVC,WAAY,CACVb,SAAS,EACTc,YAAa,UAGjBC,MAAO,CAAC,CACNF,WAAY,CACVb,SAAS,EACTc,YAAa,SAEfT,UAAW,CACTC,MAAO,yBAETU,MAAO,CACLC,aAAa,MAInBC,OAAQ,CACNlB,SAAS,sCAML,IAAAmB,EAAAxB,KACRyB,IAAMC,IAAI,yDAAyDC,KAAK,SAACC,GACvE,IAAIrC,EAAO,GACXsC,OAAOC,QAAQF,EAAOrC,KAAKwC,KAAKC,QAAQ,SAACC,GACvC,IAAIC,EAAIC,IAAOF,EAAM,IACjBG,EAAIH,EAAM,GACd1C,EAAK8C,KAAK,CAAEH,EAAGA,EAAGE,EAAGA,MAGvBZ,EAAKc,SAAS,CACZ/C,KAAM,CACJC,SAAU,CAAC,CACTC,MAAO,gBACPC,gBAAiB,sBACjBC,YAAa,UACbC,MAAM,EACNL,KAAMA,SAIXgD,MAAM,SAACC,GACRC,QAAQC,IAAIF,sCAKd,OADAG,IAASC,OAAOC,iBAAmB,OAEjCC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,0BACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAM3D,KAAMS,KAAKV,MAAMC,KAAMM,QAASG,KAAKV,MAAMO,kBAjGvCsD,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.377fc448.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Line, defaults } from 'react-chartjs-2';\nimport axios from 'axios';\nimport moment from 'moment';\n\nclass App extends React.Component {\n  state = {\n    data: {\n      datasets: [{\n        label: 'Bitcoin Value',\n        backgroundColor: '#F7931A',\n        borderColor: '#F7931A',\n        fill: true,\n        data: []\n      }]\n    },\n    options: this.getOptions()\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getOptions() {\n    const timeFormat = 'MM/DD/YYYY HH:mm:ss';\n\n    const options = {\n      title: {\n        text: 'BITCOIN',\n        fontSize: 16,\n        display: false\n      },\n      responsive: true,\n      scales: {\n        xAxes: [{\n          type: 'time',\n          gridLines: {\n            color: 'rgba(255,255,255,0.1)'\n          },\n          time: {\n            parser: timeFormat,\n            // round: 'day',\n            tooltipFormat: 'MMM DD YYYY',\n            displayFormats: {\n              day: 'MMM DD',\n              hour: 'MMM DD',\n            }\n          },\n          scaleLabel: {\n            display: false,\n            labelString: 'Time'\n          }\n        }],\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: '$ USD'\n          },\n          gridLines: {\n            color: 'rgba(255,255,255,0.1)'\n          },\n          ticks: {\n            beginAtZero: false,\n          }\n        }]\n      },\n      legend: {\n        display: false\n      }\n    }\n    return options;\n  }\n\n  getData() {\n    axios.get(\"https://api.coindesk.com/v1/bpi/historical/close.json\").then((result) => {\n      let data = [];\n      Object.entries(result.data.bpi).forEach((entry) => {\n        let x = moment(entry[0]);\n        let y = entry[1];\n        data.push({ x: x, y: y });\n      });\n\n      this.setState({\n        data: {\n          datasets: [{\n            label: 'Bitcoin Value',\n            backgroundColor: 'rgba(247,147,26,.3)',\n            borderColor: '#F7931A',\n            fill: true,\n            data: data\n          }]\n        }\n      });\n    }).catch((error) => {\n      console.log(error);\n    });\n  }\n  render() {\n    defaults.global.defaultFontColor = '#fff';\n    return (\n      <div>\n        <h1 className=\"titleHeader\">DOLLAR - BITCOIN GRAPH</h1> \n        <Line data={this.state.data} options={this.state.options} />\n      </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}